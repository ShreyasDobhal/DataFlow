/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Beans;

import Canvas.InputParallelogram;
import Canvas.OutputParallelogram;
import Canvas.OvalEnd;
import Canvas.OvalStart;
import Canvas.Parallelogram;
import Canvas.Rectangle;
import Canvas.Shapes;
import Canvas.rotatedSquare;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JFrame;

/**
 *
 * @author KALYAN
 */
public class ToolBar extends javax.swing.JPanel implements MouseListener{

    private ArrayList<Shapes> shapes;
    public static char selectedObject = 'o';
    private Shapes selectedShape;
    /**
     * Creates new form ToolBar
     */
    public ToolBar() {
        initComponents();
        
        addMouseListener(this);
        shapes = new ArrayList<Shapes>();
         
        OvalStart ovalStart = new OvalStart(125,50,120,40);
        shapes.add(ovalStart);
        selectedShape = ovalStart;
        Rectangle rect = new Rectangle(110,150,120,24);
        shapes.add(rect);
        rotatedSquare rotSqr = new rotatedSquare(110, 250, 120, 80);
        shapes.add(rotSqr);
        InputParallelogram para = new InputParallelogram(110, 350, 120, 30);
        shapes.add(para);
        OutputParallelogram oara = new OutputParallelogram(110, 450, 120, 30);
        shapes.add(oara);
        OvalEnd ovalEnd = new OvalEnd(110,550,120,40);
        shapes.add(ovalEnd);
    }

    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(2));
        Color color = new Color(52, 164, 209);
        g.setColor(color);
        for(Shapes shape:shapes){
            if(shape != null)
                shape.g = g;
            shape.setLocationAndDraw(shape.x,shape.y);
        } 
        g2.setColor(color.RED);
        g2.drawRect(selectedShape.x, selectedShape.y, selectedShape.width, selectedShape.height);
        g.setColor(color);
    }
    
//    public static void main(String arg[]){
//        ToolBar toolbar = new ToolBar();
//        JFrame jf = new JFrame();
//        jf.setTitle("ToolBar");
//        jf.setSize(400,600);
//        jf.setVisible(true);
//        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        jf.add(toolbar);
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent e) {
        
    }

    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        int x = e.getX();
        int y = e.getY();
        selectedShape = null;
        for(Shapes shape:shapes){
            if (shape.x+shape.width>x && shape.x<x && shape.y+shape.height>y && shape.y<y) {
                selectedShape = shape;
                break;
            }
        }
        if(selectedShape != null){
            if(selectedShape.getClass().toString().toLowerCase().contains("ovalstart")){
                selectedObject = 'o';
            }else if(selectedShape.getClass().toString().toLowerCase().contains("rect")){
                selectedObject = 'r';
            }else if(selectedShape.getClass().toString().toLowerCase().contains("square")){
                selectedObject = 's';
            }else if(selectedShape.getClass().toString().toLowerCase().contains("inputpara")){
                selectedObject = 'p';
            }else if(selectedShape.getClass().toString().toLowerCase().contains("outputpara")){
                selectedObject = 'c';
            }else if(selectedShape.getClass().toString().toLowerCase().contains("ovalend")){
                selectedObject = 'e';
            }
            System.out.println(selectedShape.getClass().toString().toLowerCase());
            repaint();
        }
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
